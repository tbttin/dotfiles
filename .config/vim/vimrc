" options {{{1
" Always refer to the relevant :help before adding anything to vimrc.
" Using short names has ONLY cons and ZERO pros. Don't.
" TODO Make a temp vimrc file? Or a Git branch?

" defaults.vim {{{2
" Arch's startup order:
"   /etc/vimrc
"   /usr/share/vim/vimfiles/archlinux.vim
"   $VIMDOTDIR/vimrc
"   ($VIMRUNTIME/defaults.vim)
" Load vim's default configurations.
unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

" XDG Base Directory Specification {{{2
set undodir=$XDG_CACHE_HOME/vim/undo     | call mkdir (&g:undodir, 'p', 0700)
set directory=$XDG_CACHE_HOME/vim/swap   | call mkdir (&g:directory, 'p', 0700)
set backupdir=$XDG_CACHE_HOME/vim/backup | call mkdir (&g:backupdir, 'p', 0700)
set viewdir=$XDG_CACHE_HOME/vim/view     | call mkdir (&g:viewdir, 'p', 0700)
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
set runtimepath=$VIMDOTDIR,$VIMRUNTIME,$VIMDOTDIR/after
let &g:packpath=&g:runtimepath

" indentations {{{2
" Number of spaces to use for each step of (auto)indent.
set shiftwidth=4

" Virtual tab stop instead of 8-wide tabs.
set softtabstop=4

" Don't use tabs for indentation. Spaces are nicer to work with.
set expandtab

" displays {{{2
" Yeah, I'm really bad at English :(
"set spell

" Vim won't use dark theme in st.
if &term =~ 'st'
    set background=dark
endif

" Show function name + template in auto completion pop-up menu.
set showfulltag

" When on, splitting a window will put the new window below the current one.
set splitbelow

" Wrap long lines at a character in 'breakat' rather than at the last character.
set linebreak

" Print the line number in front of each line.
set number

" Show the line number relative to the line with the cursor in front of each line.
set relativenumber

" Cursor mode indicator.
" TODO Change cursor shape when &term=linux.
let &t_SI .= "\<Esc>[4 q" " Start Insert mode.
let &t_SR .= "\<Esc>[4 q" " Start Replace mode.
let &t_EI .= "\<Esc>[2 q" " End Insert mode (ELSE).

" command-lines {{{2
" It's gotta be somewhere in there!
set path=.,,$VIMDOTDIR/**

" miscellaneous options {{{2
" Insert two spaces after a '.', '?' and '!' with a join command.
set nojoinspaces

" Disable <Leader> mapping timeout.
set notimeout

"" This plugin makes the '%' command jump to matching HTML tags, if/else/endif in Vim scripts, etc.
"if has ('syntax') && has ('eval')
  "packadd! matchit
"endif

" Possibility to have more than one unsaved buffers.
set hidden

" I don't like mouse setting in defaults.vim.
set mouse&

" Use bash syntax highlighting.
let g:is_bash = 1

" Enable function folding.
"let g:sh_fold_enabled = 1

" mappings {{{1
" [count] line comment.
noremap <silent> <Leader>cu :call tcmt#Uncomment ()<CR>
noremap <silent> <Leader>cc :call tcmt#Comment ()<CR>
noremap <silent> <Leader>ct :call tcmt#ToggleComment ()<CR>

" Auto delete adjacent pairs.
noremap! <expr> <BS> pairs#IsAdjacentPairs () ? '<Del><BS>' : '<BS>'

" Quick sudo write.
cnoremap w!! w !sudo tee % >/dev/null

" Pairs auto completions in command line mode.
cnoremap <expr> " getcmdline ()[getcmdpos () - 2] =~ '@' ? '"' : '""<Left>'
cnoremap ' ''<Left>
cnoremap { {}<Left>
cnoremap ( ()<Left>
cnoremap < <><Left>
cnoremap [ []<Left>

" Basic pairs auto completions.
inoremap <expr> " pairs#IsMatchOnLHS ('^\s*$') ? '" ' : '""<C-G>U<Left>'
inoremap <expr> ' getline ('.')[col ('.') - 2] =~ '\a' ? "'" : "''<C-G>U<Left>"
inoremap ( ()<C-G>U<Left>
inoremap < <><C-G>U<Left>
inoremap [ []<C-G>U<Left>
inoremap <expr> { pairs#IsMatchOnLHS ('^\s*$') ? '{<CR>}<C-G>U<Up><CR>' : '{}<C-G>U<Left>'

" Edit the file under cursor which doesn't exist yet.
nnoremap <Leader>gf :tabedit <cfile><CR>

" Tab to complete and literal tab.
inoremap <expr> <Tab> pairs#IsMatchOnLHS ('^\s*$') ? '<Tab>' : '<C-N>'
"inoremap <expr> <S-Tab> pairs#IsMatchOnLHS ('^\s*$') ? '<S-Tab>' : '<C-P>'
inoremap <S-Tab> <Tab>

" Kill two birds with one stone.
cabbrev H tab help

" Highlight next/previous line.
xnoremap <Up> <Esc>kV
xnoremap <Down> <Esc>jV

" Toggle spell check.
nnoremap <Leader>s :set spell!<CR>

" Search selected text (s register will be used).
xnoremap <Leader>ff "sy/\V<C-R>=escape (@s, '/\')<CR><CR>
" Substitute last search pattern.
" TODO gdefault.
nnoremap <Leader>fs :%substitute///gc<Left><Left><Left>

" Bring me familiar file.
nnoremap <Leader>vv :tabedit $MYVIMRC<CR>

" autocommands {{{1
augroup MakePrg " {{{2
    autocmd!
    " Use the Makefile template when in practices folder.
    autocmd BufNewFile,BufRead ?*/practices/?*/?*/?*.[ch] setlocal makeprg=make\ -f\ $VIMDOTDIR/templates/Makefile
augroup END

augroup Templates " {{{2
    autocmd!
    " Read and parse templates.
    autocmd BufNewFile ?* call templates#LoadTemplate (expand ('<afile>:p:t'))
    " Start insert mode at the end of line containing 'Description: '.
    autocmd BufNewFile main.c call templates#AddFileDescription ()
    " TODO Auto update timestamp? Store it in a variable and update when exit.
    "autocmd BufWritePre,FileWritePre main.c undojoin | call templates#UpdateTimestamp ()
augroup END
