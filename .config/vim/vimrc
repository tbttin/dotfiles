" options {{{1
" Always refer to the relevant :help before adding anything to vimrc.
" Using short names has ONLY cons and ZERO pros. Don't.
" TODO Make a temp vimrc file? Or a Git branch?

" defaults.vim {{{2
" Arch's startup order:
"   /etc/vimrc
"   /usr/share/vim/vimfiles/archlinux.vim
"   $VIMHOME/vimrc
"   ($VIMRUNTIME/defaults.vim)

" Load vim's default configurations.
unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

" XDG Base Directory Specification {{{2
set undodir=$XDG_CACHE_HOME/vim/undo     | call mkdir (&g:undodir, 'p', 0700)
set directory=$XDG_CACHE_HOME/vim/swap   | call mkdir (&g:directory, 'p', 0700)
set backupdir=$XDG_CACHE_HOME/vim/backup | call mkdir (&g:backupdir, 'p', 0700)
set viewdir=$XDG_CACHE_HOME/vim/view     | call mkdir (&g:viewdir, 'p', 0700)
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
set runtimepath=$VIMHOME,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$VIMHOME/after
let &g:packpath = &g:runtimepath

" indentations {{{2
set shiftwidth=4          " Number of spaces to use for each step of (auto)indent.
set softtabstop=4         " Virtual tab stop instead of 8-wide tabs.
set expandtab             " Don't use tabs for indentation. Spaces are nicer to work with.

" displays {{{2
set splitbelow            " When on, splitting a window will put the new window below the current one.
set linebreak             " Wrap long lines at a character in 'breakat' rather than at the last character.
set number                " Print the line number in front of each line.
set relativenumber        " Show the line number relative to the line with the cursor in front of each line.
let &t_SI .= "\<Esc>[4 q" " Start Insert mode (Steady underline cursor).
let &t_SR .= "\<Esc>[4 q" " Start Replace mode (Same as Insert mode).
let &t_EI .= "\<Esc>[2 q" " End Insert mode (Otherwise, full-steady block cursor).
if &term =~ 'st'
    set background=dark   " Vim will not use dark background theme in st.
endif

" cmdlines {{{2
set path=.,,$VIMHOME/** " It's gotta be somewhere in there!

" miscellany {{{2
set nojoinspaces          " Insert two spaces after a '.', '?' and '!' with a join command.
set notimeout             " Disable <Leader> mapping timeout.
set hidden                " Possibility to have more than one unsaved buffers.
set mouse&                " Idon't like mouse setting in defaults.vim.
packadd! matchit          " Improved '%' will jump to matching HTML tags, if/else/endif in Vim scripts, etc.

" mappings {{{1
" Note: Only in a mapping, the special <SID> prefix is actually necessary.

" Start interactive EasyAlign in visual mode.
xnoremap <silent> <Leader>a <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object.
noremap <silent> <Leader>a <Plug>

" Mappings for my comment script ([count]<lhs> works too).
noremap <silent> <Leader>cu :call tcmt#Uncomment ()<CR>
noremap <silent> <Leader>cc :call tcmt#Comment ()<CR>
"noremap <silent> <Leader>ct :call tcmt#ToggleComment ()<CR>

"" Basic pairs auto completions.
"inoremap <expr> " pairs#IsMatchOnLHS ('\v(^\s*$)\|(\S$)') ? '"' : '""<C-G>U<Left>'
"inoremap <expr> ' pairs#IsMatchOnLHS ('\S$') ? "'" : "''<C-G>U<Left>"
"inoremap ( ()<C-G>U<Left>
"inoremap < <><C-G>U<Left>
"inoremap [ []<C-G>U<Left>
"inoremap <expr> { pairs#IsMatchOnLHS ('^\s*$') ? '{<CR>}<C-G>U<Up><CR>' : '{}<C-G>U<Left>'

"" Pairs auto completions in cmd-line.
"cnoremap <expr> " pairs#IsMatchOnLHS ('\S$') ? '"' : '""<Left>'
"cnoremap <expr> ' pairs#IsMatchOnLHS ('\S$') ? "'" : "''<Left>"
"cnoremap { {}<Left>
"cnoremap ( ()<Left>
"cnoremap < <><Left>
"cnoremap [ []<Left>

"" Auto delete adjacent pairs.
"noremap! <expr> <BS> pairs#IsAdjacentPairs () ? '<Del><BS>' : '<BS>'

" Tab completion and literal tab.
inoremap <expr> <Tab> pairs#IsMatchOnLHS ('^\s*$') ? '<Tab>' : '<C-N>'
"inoremap <expr> <S-Tab> pairs#IsMatchOnLHS ('^\s*$') ? '<S-Tab>' : '<C-P>'
" Use i_<C-V><Tab> instead but no 'expandtab', 'softtabstop', .etc
inoremap <S-Tab> <Tab>

" Edit the file under cursor (<cfile> or c_^r_^f) which doesn't exist yet.
nnoremap <Leader>gf :tabedit <cfile><CR>

" Quick write as supper user, reload file content.
" cabbrev suck with cnoremap.
"cabbrev w!! w !sudo tee "%" > /dev/null
command W execute 'write !doas tee "%" > /dev/null' | edit!

" Kill two birds with one stone.
cabbrev H tab help

" Highlight next/previous line.
xnoremap <Up> <Esc>kV
xnoremap <Down> <Esc>jV

" Toggle spell check. My bad :(
nnoremap <Leader>s :set spell!<CR>

" Search forward for selected text (@s will be used).
xnoremap <Leader>ff "sy/\V<C-R>=escape (@s, '/\')<CR><CR>

" Substitute the 'last-pattern'.
" TODO: Check 'gdefault'.
nnoremap <Leader>fs :%s///gc<Left><Left><Left>

" Edit vimrc in new tab.
nnoremap <Leader>vv :tabedit $VIMHOME/vimrc<CR>

" autocommands {{{1
augroup MakePrg " {{{2
    autocmd!

    " Use the Makefile in "$VIMHOME/tmplts" when in practices folder.
"    autocmd BufNewFile,BufRead */practices/*/*/?\+.[ch] setlocal makeprg=make\ -f\ $VIMHOME/tmplts/Makefile
augroup END

augroup Templates " {{{2
    autocmd!

    " Read and parse "same name" tmplts in $VIMHOME/tmplts.
    autocmd BufNewFile ?\+ call tmplts#LoadTemplate (expand ('<afile>:p:t'))

    " Read and parse C header template.
    autocmd BufNewFile ?\+.h call tmplts#LoadTemplate ('skeleton.' . expand ('<afile>:p:e')) | 3 | startinsert

    " Start insert mode at the end of line containing 'Description: '.
    autocmd BufNewFile main.c call tmplts#AddFileDescription ()

    " Auto update file "Last modified: " if it exist.
    "autocmd FileWritePre main.c undojoin | call tmplts#UpdateTimestamp ()
augroup END
