" options. {{{
" Always refer to the relevant :help before adding anything to vimrc.
" Using short names has ONLY cons and ZERO pros.

" defaults.vim {{{
" /etc/vimrc
" /usr/share/vim/vimfiles/archlinux.vim
" $VIMDOTDIR/vimrc
" $VIMRUNTIME/defaults.vim
unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim
" }}}

" Use XDG Base Directory Specification. {{{
set undodir=$XDG_DATA_HOME/vim/undo
set directory=$XDG_DATA_HOME/vim/swap
set backupdir=$XDG_DATA_HOME/vim/backup
set viewdir=$XDG_DATA_HOME/vim/view
set viminfo+=n$XDG_DATA_HOME/vim/viminfo
set runtimepath=$VIMDOTDIR,$VIMRUNTIME,$VIMDOTDIR/after

" If not exist create it.
if !isdirectory(&g:undodir)   | call mkdir(&g:undodir, "p", 0700)   | endif
if !isdirectory(&g:directory) | call mkdir(&g:directory, "p", 0700) | endif
if !isdirectory(&g:backupdir) | call mkdir(&g:backupdir, "p", 0700) | endif
if !isdirectory(&g:viewdir)   | call mkdir(&g:viewdir, "p", 0700)   | endif
" }}}

" displays. {{{
" Show function name + template in auto completion popup menu.
set showfulltag

" When on, splitting a window will put the new window below the current one.
set splitbelow

" Wrap long lines at a character in 'breakat' rather than at the last character.
set linebreak

" Display number and relative number.
set number relativenumber

" Cursor mode indicator. Synchronize with terminal cursor (Bash's vi mode).
let &t_SI.="\<Esc>[3 q" " SI = INSERT mode.
let &t_SR.="\<Esc>[4 q" " SR = REPLACE mode.
let &t_EI.="\<Esc>[1 q" " EI = NORMAL mode (ELSE).
" }}}

" indentations. {{{
" Number of spaces to use for each step of (auto)indent.
set shiftwidth=4

" Virtual tab stop (compat for 8-wide tabs).
set softtabstop=4

" Don't use tabs for indentation. Spaces are nicer to work with.
set expandtab
" }}}

" command-lines. {{{
" Ignore file pattern in cmdline completion.
set wildignore+=*.o

" It's gotta be somewhere in there!
set path-=, path+=**
" }}}

" Bash default syntax highlighting.
let g:is_bash=1
" Enable function folding.
let g:sh_fold_enabled=1

" This plugin makes the "%" command jump to matching HTML tags, if/else/endif in Vim scripts, etc.
"if has('syntax') && has('eval')
"  packadd! matchit
"endif

" Possibility to have more than one unsaved buffers.
set hidden

" Reset defaults.vim mouse option.
set mouse&
" }}}

" functions. {{{
" TODO Upgrade this function, [\_s*]
function! IsAPairs() " {{{
    let b:pairs = {"(" : ")", "[" : "]", "{" : "}", "<" : ">", "'" : "'", "\"" : "\""}
    let b:mode = mode ()
    if b:mode == 'i'
        let b:open = getline ('.')[col ('.') - 2]
        let b:close = getline ('.')[col ('.') - 1]
    elseif b:mode == 'c'
        let b:open = getcmdline ()[getcmdpos () - 2]
        let b:close = getcmdline ()[getcmdpos () - 1]
    endif
    return get (b:pairs, b:open, 'NONE') == b:close
endfunction " }}}

function! ModifyFileDescription() " {{{
    " Search backward after parsing.
    " 0 if not found, no error.
    if (search("Description:", "b"))
        startinsert!
    endif
endfunction " }}}

function! IsMatchOnLHS(str) " {{{
    return strpart(getline('.'), 0, col('.') - 1) =~ a:str
endfunction " }}}
" }}}

" mappings. {{{
" TODO Comment and uncomment script.
" Auto delete adjacent pairs.
noremap! <expr> <BS> IsAPairs() ? "<Del><BS>" : "<BS>"

" Cmdline mode pairs auto completions.
cnoremap " ""<Left>
cnoremap ' ''<Left>
cnoremap ( ()<Left>
cnoremap < <><Left>
cnoremap [ []<Left>

" Basic pairs auto completions.
inoremap <expr> " IsMatchOnLHS('^\s*$') ? "\"" : "\"\"<Left>"
inoremap ' ''<Left>
inoremap ( ()<Left>
inoremap < <><Left>
inoremap [ []<Left>
inoremap <expr> { IsMatchOnLHS('^\s*$') ? "{<CR>}<Up><CR>" : "{}<Left>"

" Yank to last non-blank.
nnoremap Y yg_

" Literal tab and tab to complete.
inoremap <expr> <Tab> IsMatchOnLHS('^\s*$') ? "<Tab>" : "<C-N>"

" Kill two birds with one stone.
cabbrev H tab help

" Highlight next/previous line.
xnoremap gk <Esc>kV
xnoremap gj <Esc>jV

" Search selected text.
xnoremap <Leader>f "sy/\V<C-R>=escape(@s, '/\')<CR>

" TODO Answer the question.
" Substitute last search pattern. With or without % is better?
nnoremap <Leader>s :%substitute///gc<Left><Left><Left>

" Bring me Makefile template.
nnoremap <Leader>vtM :tabedit $VIMDOTDIR/templates/Makefile<CR>

" Bring me main.c template.
nnoremap <Leader>vtm :tabedit $VIMDOTDIR/templates/main.c<CR>

" Bring me c.vim plugin.
nnoremap <Leader>vc :tabedit $VIMDOTDIR/after/ftplugin/c.vim<CR>

" Bring $MYVIMRC in tab.
nnoremap <Leader>vv :tabedit $MYVIMRC<CR>
" }}}

" autocommands. {{{
augroup MakePrg
    autocmd!
    " Use the Makefile template when in problemset folder.
    autocmd BufNewFile,BufRead */problemset/*/*.c setlocal makeprg=make\ -f\ $VIMDOTDIR/templates/Makefile
augroup END

augroup Templates
    autocmd!
    " Read in template file with the same name.
    autocmd BufNewFile ?* silent! execute '0read $VIMDOTDIR/templates/'.expand("<afile>:t") | $d
    " Parse special text in the read template.
    autocmd BufNewFile ?* %substitute#\[:VIM_EVAL:\]\(.\{-\}\)\[:END_EVAL:\]#\=eval(submatch(1))#ge
    " Auto start insert mode at the end of line containing 'Description:'.
    autocmd BufNewFile ?* call ModifyFileDescription()
augroup END
" }}}

" modeline {{{
" vim: foldmethod=marker
" }}}
