" Options {{{1
" Always refer to the relevant :help before adding anything to vimrc.
" Using short names has ONLY cons and ZERO pros. Don't.

" defaults.vim {{{2

" NOTE {{{3
" Vim startup order in Arch:
"   /etc/vimrc
"   $VIM/vimfiles/archlinux.vim
"   $VIMHOME/vimrc
"   [$VIMRUNTIME/defaults.vim]
" End note }}}3
" Load vim's default configurations.
unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

" XDGBDS {{{2

" Move all vim data to 'XDG_STATE_HOME'.
let $VIMDATA = $HOME .. '/.local/state/vim'
set undodir=$VIMDATA/undo                     | call mkdir(&g:undodir, 'p', 0700)
set directory=$VIMDATA/swap                   | call mkdir(&g:directory, 'p', 0700)
set backupdir=$VIMDATA/backup                 | call mkdir(&g:backupdir, 'p', 0700)
set viewdir=$VIMDATA/view                     | call mkdir(&g:viewdir, 'p', 0700)
exe 'let g:netrw_home = $VIMDATA .. "/netrw"' | call mkdir(g:netrw_home, 'p', 0700)
set viminfo+=n$VIMDATA/viminfo
set runtimepath=$VIMHOME,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$VIMHOME/after
let &packpath = &runtimepath

" Backup {{{2

" TODO: Learn these!

set backup
" set undofile

" Indentations {{{2

" TODO: Indent with tabs, align with spaces.

" Every one and every program use 8 characters tabstop.
" Change tapstop will effect 'textwidth' and alignment.

set expandtab
set softtabstop=2
set shiftwidth=2

" Displays {{{2

set lazyredraw                       " Do not redrawn while executing macros, registers, commands, .etc
set textwidth=72                     " Horizontal split a dozen thousand lines of code in vim with Lenovo T400 screen.
" set number                           " Print the line number in front of each line.
" set relativenumber                   " Show the line number relative to the line with the cursor in front of each line.
if &term =~ 'st'
  set background=dark                " Vim will not use dark-background theme in st.
  set termguicolors                  " Enable true color.
  let &t_8f = "\e[38;2;%lu;%lu;%lum" " Set foreground color (R, G, B).
  let &t_8b = "\e[48;2;%lu;%lu;%lum" " Set background color (R, G, B).
  let &t_SI .= "\e[4 q"              " Start Insert mode (Steady underline cursor).
  let &t_EI .= "\e[2 q"              " End Insert mode (Otherwise, full-steady block cursor).
" elseif &term =~ 'linux'            "
  " Cursor shape in console.         "
  " TODO: How does it work?          "
  " let &t_ve = "\e[?25h"            "
  " let &t_vi = "\e[?25l"            "
  " let &t_SI = "\e[?0c"             "
  " let &t_EI = "\e[?16;143;255c"    "
endif

" Cmdlines {{{2

" TODO: Move $VIMHOME/** to a ':e **/' mapping.
set path-=/usr/include     " '.' relative to the directory of the current file.
set wildignore+=*/pack/*   " In most cases plugin's files are nonedded.
set wildmode=full:lastused " Tab suggest prior last used buffer than alphabetical order.
                           " How to do the same with ":e **/*"?

" Miscellany {{{2

let g:mapleader = "\<Space>"                    " Use <Space> as map leader.
let g:netrw_browsex_viewer = '/usr/bin/firefox' " gx to open-under cursor link in Firefox.
set nojoinspaces                                " Insert two spaces after a '.', '?' and '!' with a join command.
set hidden                                      " Possibility to have more than one unsaved buffers.
set mouse&                                      " I don't like mouse setting in defaults.vim.
packadd! matchit                                " Improved '%' in HTLM and Vim scripts, etc.
set shellcmdflag=-ic                            " Vim will run external commands in an interactive shell (bash -ic cmd).
                                                " Normal-mode [count]K command will run man() in .bashrc file.
                                                " But vim will become an background process sometime.

" Mappings {{{1
" Note: use uppercases for special editions?

" Maintaining {{{2

"" Basic pairs auto completions.
"inoremap <expr> " pairs#IsMatchOnLHS('\v(^\s*$)\|(\S$)') ? '"' : '""<C-G>U<Left>'
"inoremap <expr> ' pairs#IsMatchOnLHS('\S$') ? "'" : "''<C-G>U<Left>"
"inoremap ( ()<C-G>U<Left>
"inoremap < <><C-G>U<Left>
"inoremap [ []<C-G>U<Left>
"inoremap <expr> { pairs#IsMatchOnLHS('^\s*$') ? '{<CR>}<C-G>U<Up><CR>' : '{}<C-G>U<Left>'

"" Pairs auto completions in cmd-line.
"cnoremap <expr> " pairs#IsMatchOnLHS('\S$') ? '"' : '""<Left>'
"cnoremap <expr> ' pairs#IsMatchOnLHS('\S$') ? "'" : "''<Left>"
"cnoremap { {}<Left>
"cnoremap ( ()<Left>
"cnoremap < <><Left>
"cnoremap [ []<Left>

"" Auto delete adjacent pairs.
"noremap! <expr> <BS> pairs#IsAdjacentPairs() ? '<Del><BS>' : '<BS>'

" A better [S-]Tab?
" inoremap <expr> <Tab>   pairs#IsMatchOnLHS('\k$') ? '<C-N>' : '<Tab>'
" inoremap <expr> <S-Tab> pairs#IsMatchOnLHS('\k$') ? '<C-P>' : '<Tab>'

" End maintaining }}}2

" Fly~
" ':ls' vs 'wildcharm'?
" Note: noneed '*' here, noneed to <Tab> (partial name then <CR>).
" Try gb instead of <Leader>b
nnoremap <Leader>b :ls<CR>:b<Space>

" Toggle spell check. Then just "]s" and "z=".
nnoremap <Leader>ts :set spell! spell?<CR>
" Toggle paste.
nnoremap <Leader>tp :set paste! paste?<CR>
" Toggle highlight search.
nnoremap <Leader>th :set hlsearch! hlsearch?<CR>

" Search forward the visual selected text ('@s' will be used).
xnoremap <Leader>ss "sy/\V<C-R>=escape(@s, '/\')<CR><CR>

" Replace the 'last-pattern'.
nnoremap <Leader>sr :%s///gc<Left><Left><Left>

" 'wildcards' expansion vs 'path'?
" This is just 'wildmenu' + 'wildcards' in '{file}' name expansion,
" ':e' command does NOT support 'wildcard' (of course), see 'file-searching'.
" Quick find and edit files in current directory.
" "**" = "./**", it means NO upward search, no "**2".
nnoremap <Leader>ee :e **/*
" Quick find and edit files in '$VIMHOME'.
nnoremap <Leader>eh :e $VIMHOME/**/*

" Quick supper user write and reload file content when necessary.
com! SW exe 'w !/usr/bin/doas /usr/bin/tee "%" >/dev/null' | if !v:shell_error | e! | en

" " Repeat the last ':s' with same flags.
" " Note:
" "   + '&' must be the first one.
" "   + ':s' and ':&' don't keep the flags.
" noremap & :&&<CR>

" Source current file.
nnoremap <Leader>so :so "%"<CR>

" Create file under the cursor.
nnoremap <Leader>ef :e <cfile><CR>

" Plugins {{{2

" Easy-align {{{3

if !exists('g:easy_align_delimiters')
  let g:easy_align_delimiters = {}
endif

" Align variable definitions by name.
" Then, just "<Leader>aipd" then "<Leader>aip=".
let g:easy_align_delimiters['d'] = {
                        \ 'pattern': '\(const\|static\|unsigned\)\@<! ',
                        \ 'left_margin': 0, 'right_margin': 0
                        \ }

" Start interactive EasyAlign in visual mode.
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object.
nmap ga <Plug>(EasyAlign)

" Autocommands {{{1

augroup GlobalMarks " {{{2
  autocmd!
  " autocmd BufLeave vimrc normal! mR
  autocmd BufLeave *.vim normal! mV
  autocmd BufLeave *.md normal! mM
  " autocmd BufLeave *.h normal! mH
  " autocmd BufLeave *.c normal! mC
augroup END

augroup Templates " {{{2
  autocmd!
  " Read and parse template which have the same name in $VIMHOME/tmplts.
  autocmd BufNewFile ?\+ call tmplts#LoadTemplate(expand('<afile>:t'))
  " Read and parse template according file extension.
  autocmd BufNewFile ?\+ call tmplts#LoadTemplate('skeleton.' . expand('<afile>:e'))
  " Start insert mode at the end of line containing 'Description: '.
  autocmd BufNewFile main.c call tmplts#AddFileDescription()
augroup END

augroup ModelineSuck " {{{2
  " 'kp' can't be set with 'modeline' for security reason.
  autocmd!
  " Markdown in there are notes about Vim, 'kp' should be ":help".
  autocmd BufRead,BufNewFile */vims/*.md setl kp=\:help
augroup END

