" Options {{{1
" Always refer to the relevant :help before adding anything to vimrc.
" Using short names has ONLY cons and ZERO pros. Don't.

" Defaults.vim {{{2
" Arch's startup order:
"   /etc/vimrc
"   $VIM/vimfiles/archlinux.vim
"   $VIMHOME/vimrc
"   [$VIMRUNTIME/defaults.vim]
" Load vim's default configurations.
unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

" Respect XDGBDS {{{2
let $VIMDATA = fnameescape($XDG_STATE_HOME) .. '/vim'
set undodir=$VIMDATA/undo                     | call mkdir (&g:undodir, 'p', 0700)
set directory=$VIMDATA/swap                   | call mkdir (&g:directory, 'p', 0700)
set backupdir=$VIMDATA/backup                 | call mkdir (&g:backupdir, 'p', 0700)
set viewdir=$VIMDATA/view                     | call mkdir (&g:viewdir, 'p', 0700)
exe 'let g:netrw_home = $VIMDATA .. "/netrw"' | call mkdir (g:netrw_home, 'p', 0700)
set viminfo+=n$VIMDATA/viminfo
set runtimepath=$VIMHOME,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$VIMHOME/after
let &g:packpath = &g:runtimepath

" TODO: Test tab indentation and space alignment.
" Indentations {{{2
set shiftwidth=2          " Number of spaces to use for each step of (auto)indent.
set softtabstop=2         " Virtual tab stop instead of 8-wide tabs.
set expandtab             " Don't use tabs for indentation. Spaces are nicer to work with.

" Displays {{{2
set splitbelow            " When on, splitting a window will put the new window below the current one.
" set linebreak             " Wrap long lines at a character in 'breakat' rather than at the last character.
set number                " Print the line number in front of each line.
set relativenumber        " Show the line number relative to the line with the cursor in front of each line.
if &term !~ 'linux'
  let &t_SI .= "\e[4 q"   " Start Insert mode (Steady underline cursor).
  let &t_EI .= "\e[2 q"   " End Insert mode (Otherwise, full-steady block cursor).
  " let &t_SR .= "\e[4 q"   " Start Replace mode (Same as Insert mode).
else
  " TODO: How does it work?
  " let &t_ve = "\e[?25h"
  " let &t_vi = "\e[?25l"
  " let &t_SI = "\e[?0c"
  " let &t_EI = "\e[?16;143;255c"
endif
if &term =~ 'st'
  set background=dark     " Because vim will not use dark-background theme in st.
endif

" Cmdlines {{{2
set path=.,,$VIMHOME/**   " It's must be somewhere in there. Find it!

" Miscellany {{{2
set nojoinspaces          " Insert two spaces after a '.', '?' and '!' with a join command.
set hidden                " Possibility to have more than one unsaved buffers.
set mouse&                " I don't like mouse setting in defaults.vim.
packadd! matchit          " Improved '%' will jump to matching HTML tags, if/else/endif in Vim scripts, etc.

" Mappings {{{1
" Note: Only in a mapping, the special <SID> prefix is actually necessary.

" Start interactive EasyAlign in visual mode.
xmap <silent> gla <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object.
nmap <silent> gla <Plug>(EasyAlign)

" Mappings for TCmt plugin.
nmap glc  <Plug>TCmt
xmap glc  <Plug>TCmt
nmap glcc <Plug>TCmtLine

" Maintaining {{{2
"" Basic pairs auto completions.
"inoremap <expr> " pairs#IsMatchOnLHS ('\v(^\s*$)\|(\S$)') ? '"' : '""<C-G>U<Left>'
"inoremap <expr> ' pairs#IsMatchOnLHS ('\S$') ? "'" : "''<C-G>U<Left>"
"inoremap ( ()<C-G>U<Left>
"inoremap < <><C-G>U<Left>
"inoremap [ []<C-G>U<Left>
"inoremap <expr> { pairs#IsMatchOnLHS ('^\s*$') ? '{<CR>}<C-G>U<Up><CR>' : '{}<C-G>U<Left>'

"" Pairs auto completions in cmd-line.
"cnoremap <expr> " pairs#IsMatchOnLHS ('\S$') ? '"' : '""<Left>'
"cnoremap <expr> ' pairs#IsMatchOnLHS ('\S$') ? "'" : "''<Left>"
"cnoremap { {}<Left>
"cnoremap ( ()<Left>
"cnoremap < <><Left>
"cnoremap [ []<Left>

"" Auto delete adjacent pairs.
"noremap! <expr> <BS> pairs#IsAdjacentPairs () ? '<Del><BS>' : '<BS>'
" End maintaining }}}

" A better [S-]Tab.
inoremap <expr> <Tab>   pairs#IsMatchOnLHS ('\k$') ? '<C-N>' : '<Tab>'
inoremap <expr> <S-Tab> pairs#IsMatchOnLHS ('\k$') ? '<C-P>' : '<Tab>'

" Quick supper user write and reload file content when necessary.
command SW execute 'write !/usr/bin/doas /usr/bin/tee "%" >/dev/null' | if !v:shell_error | edit! | endif

" Toggle spell check. Just "]s" and "z=".
nnoremap glts :set spell! spell?<CR>
" Toggle paste.
nnoremap gltp :set paste! paste?<CR>
" Toggle highlight search.
nnoremap glth :set hlsearch! hlsearch?<CR>

" Search forward the visual selected text (@s will be used).
xnoremap glff "sy/\V<C-R>=escape (@s, '/\')<CR><CR>

" Substitute the "last-pattern".
nnoremap glfs :%s///gc<Left><Left><Left>

" Edit vimrc in new tab.
nnoremap glvv :tabedit $VIMHOME/vimrc<CR>

" Plugin extras {{{1
" Easy-align {{{2
if !exists('g:easy_align_delimiters')
  let g:easy_align_delimiters = {}
endif

" Align variable definitions by name. Just "glaipd" then "glaip=".
let g:easy_align_delimiters['d'] = {
\ 'pattern': '\(const\|static\|unsigned\)\@<! ',
\ 'left_margin': 0, 'right_margin': 0
\ }

" Autocommands {{{1
augroup Templates " {{{2
  autocmd!
  " Read and parse template which have the same name in t$VIMHOME/tmplts.
  autocmd BufNewFile ?\+ call tmplts#LoadTemplate (expand ('<afile>:p:t'))
  " Read and parse template according file extension.
  autocmd BufNewFile ?\+ call tmplts#LoadTemplate ('skeleton.' . expand ('<afile>:p:e'))
  " Start insert mode at the end of line containing 'Description: '.
  autocmd BufNewFile main.c call tmplts#AddFileDescription ()
augroup END

